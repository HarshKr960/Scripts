#!/bin/bash

# RNA-Seq Pipeline for Research-Level Analysis
# Author: [Your Name]
# Date: [Date]

# Set up directories for input and output
DATA_DIR="/home/DATA"
REF_DIR="/home/ref"
OUTPUT_DIR="/home/Output"
QC_DIR="$OUTPUT_DIR/QC"
TRIM_DIR="$OUTPUT_DIR/Trimmed"
ALIGN_DIR="$OUTPUT_DIR/Aligned"
COUNT_DIR="$OUTPUT_DIR/Counts"
LOG_DIR="$OUTPUT_DIR/Logs"

# Create output directories if they don't exist
mkdir -p $QC_DIR $TRIM_DIR $ALIGN_DIR $COUNT_DIR $LOG_DIR

# Reference genome and index
HISAT2_INDEX="$REF_DIR/r64/genome"
ANNOTATION_FILE="$REF_DIR/Saccharomyces_cerevisiae.R64-1-1.113.gtf"
TRIMMOMATIC_ADAPTERS="/root/miniconda3/share/trimmomatic/adapters/NexteraPE-PE.fa"

# Number of threads
THREADS=12

# Start timing the pipeline
START_TIME=$SECONDS

# Log file
LOG_FILE="$LOG_DIR/pipeline.log"
exec &> >(tee -a "$LOG_FILE")

echo "Pipeline started at $(date)"

# Step 1: Quality Control (FastQC)
echo "Running FastQC..."
for FILE in $DATA_DIR/*.fastq.gz; do
    fastqc $FILE -t $THREADS -o $QC_DIR
    if [ $? -ne 0 ]; then
        echo "Error: FastQC failed for $FILE" >&2
        exit 1
    fi
done
echo "FastQC completed."

# Step 2: Trimming (Trimmomatic)
echo "Running Trimmomatic..."
for FILE in $DATA_DIR/*_1.fastq.gz; do
    BASE=$(basename $FILE "_1.fastq.gz")
    TRIMMED_1="$TRIM_DIR/${BASE}_1_trimmed.fastq.gz"
    TRIMMED_2="$TRIM_DIR/${BASE}_2_trimmed.fastq.gz"

    trimmomatic PE -threads $THREADS \
        $DATA_DIR/${BASE}_1.fastq.gz $DATA_DIR/${BASE}_2.fastq.gz \
        $TRIMMED_1 /dev/null \
        $TRIMMED_2 /dev/null \
        ILLUMINACLIP:$TRIMMOMATIC_ADAPTERS:2:30:10 LEADING:15 TRAILING:15 SLIDINGWINDOW:4:15 MINLEN:36

    if [ $? -ne 0 ]; then
        echo "Error: Trimmomatic failed for $BASE" >&2
        exit 1
    fi
done
echo "Trimmomatic completed."

# Step 3: Initial Alignment to Infer Strandedness
echo "Running initial HISAT2 alignment to infer strandedness..."
for FILE in $TRIM_DIR/*_1_trimmed.fastq.gz; do
    BASE=$(basename $FILE "_1_trimmed.fastq.gz")
    TEMP_BAM_FILE="$ALIGN_DIR/${BASE}_temp.bam"

    hisat2 -p $THREADS -x $HISAT2_INDEX \
        -1 $TRIM_DIR/${BASE}_1_trimmed.fastq.gz \
        -2 $TRIM_DIR/${BASE}_2_trimmed.fastq.gz \
        -S /dev/null | samtools sort -o $TEMP_BAM_FILE

    if [ $? -ne 0 ]; then
        echo "Error: Initial HISAT2 alignment failed for $BASE" >&2
        exit 1
    fi

done
echo "Initial alignment completed."

# Step 4: GTF to BED Conversion and Strandedness Check
echo "Converting GTF to BED..."
gtf2bed < $ANNOTATION_FILE > $REF_DIR/Saccharomyces_cerevisiae.R64-1-1.113.bed
if [ $? -ne 0 ]; then
    echo "Error: GTF to BED conversion failed" >&2
    exit 1
fi
echo "GTF to BED conversion completed."

echo "Inferring strandedness..."
STRANDEDNESS=$(infer_experiment.py -i $ALIGN_DIR/*_temp.bam -r $REF_DIR/Saccharomyces_cerevisiae.R64-1-1.113.bed)
echo "Strandedness: $STRANDEDNESS"
echo "$STRANDEDNESS" > "$LOG_DIR/strandedness_check.log"

# Parse strandedness result to decide alignment parameters
if [[ "$STRANDEDNESS" == *"fr-firststrand"* ]]; then
    HISAT2_STRAND_OPTION="--rna-strandness FR"
elif [[ "$STRANDEDNESS" == *"fr-secondstrand"* ]]; then
    HISAT2_STRAND_OPTION="--rna-strandness RF"
else
    HISAT2_STRAND_OPTION=""
    echo "Warning: Strandedness could not be determined. Defaulting to unstranded alignment."
fi

# Remove temporary BAM files
rm $ALIGN_DIR/*_temp.bam

echo "Strandedness inference completed."

# Step 5: Alignment (HISAT2)
echo "Running HISAT2 with strand information..."
for FILE in $TRIM_DIR/*_1_trimmed.fastq.gz; do
    BASE=$(basename $FILE "_1_trimmed.fastq.gz")
    SAM_FILE="$ALIGN_DIR/${BASE}.sam"
    SUMMARY_FILE="$ALIGN_DIR/${BASE}_alignment_summary.txt"

    hisat2 -p $THREADS -x $HISAT2_INDEX \
        -1 $TRIM_DIR/${BASE}_1_trimmed.fastq.gz \
        -2 $TRIM_DIR/${BASE}_2_trimmed.fastq.gz \
        $HISAT2_STRAND_OPTION \
        -S $SAM_FILE 2> $SUMMARY_FILE

    if [ $? -ne 0 ]; then
        echo "Error: HISAT2 alignment failed for $BASE" >&2
        exit 1
    fi
done
echo "HISAT2 alignment completed."

# Step 6: Convert SAM to BAM and Sort (SAMtools)
echo "Converting SAM to sorted BAM..."
for SAM_FILE in $ALIGN_DIR/*.sam; do
    BASE=$(basename $SAM_FILE ".sam")
    BAM_FILE="$ALIGN_DIR/${BASE}.bam"
    SORTED_BAM_FILE="$ALIGN_DIR/${BASE}_sorted.bam"

    samtools view -@ $THREADS -bS $SAM_FILE > $BAM_FILE
    if [ $? -ne 0 ]; then
        echo "Error: Failed to convert $SAM_FILE to BAM" >&2
        exit 1
    fi

    samtools sort -@ $THREADS $BAM_FILE -o $SORTED_BAM_FILE
    if [ $? -ne 0 ]; then
        echo "Error: Failed to sort $BAM_FILE" >&2
        exit 1
    fi

    samtools index $SORTED_BAM_FILE
    if [ $? -ne 0 ]; then
        echo "Error: Failed to index $SORTED_BAM_FILE" >&2
        exit 1
    fi

    rm $SAM_FILE $BAM_FILE

done
echo "SAM to BAM conversion and sorting completed."

# Step 7: Feature Counts (featureCounts)
echo "Running featureCounts..."
featureCounts -T $THREADS -a $ANNOTATION_FILE -o $COUNT_DIR/counts.txt -p $ALIGN_DIR/*_sorted.bam
if [ $? -ne 0 ]; then
    echo "Error: featureCounts failed" >&2
    exit 1
fi
echo "featureCounts completed."

# Step 8: Filter FeatureCounts Output
INPUT_FILE="$COUNT_DIR/counts.txt"
OUTPUT_FILE="$COUNT_DIR/filtered_counts.txt"

echo "Filtering featureCounts output..."
awk 'BEGIN { OFS="\t" } NR==1 { print; next } { printf "%s\t", $1; for(i=7; i<=NF; i++) printf "%s%s", $i, (i==NF ? "\n" : OFS) }' $INPUT_FILE > $OUTPUT_FILE
if [ $? -ne 0 ]; then
    echo "Error: Filtering featureCounts output failed" >&2
    exit 1
fi
echo "Filtering completed. Filtered counts saved to $OUTPUT_FILE."

# Finalize Pipeline
ELAPSED_TIME=$(( SECONDS - START_TIME ))
echo "Pipeline completed successfully at $(date). Total time taken: $ELAPSED_TIME seconds."

exit 0
